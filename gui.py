#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 04, 2022 03:30:55 PM CEST  platform: Linux
import time
from PIL import Image, ImageTk
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.constants import *

from lib.io import *
from lib.onto import *
from lib.engine import *


class Application:
    def __init__(self, top=None):
        self.result = None
        self.engine = None
        self.onto = Ontology()
        self.input_mgr = InputManager()
        self.output_mgr = OutputManager(self.onto)

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("823x766+557+89")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("DL Reasoner ALC")
        top.configure(highlightcolor="black")

        self.top = top

        self.title_label = tk.Label(self.top)
        self.title_label.place(relx=0.0, rely=0.013, height=41, width=823)
        self.title_label.configure(activebackground="#f9f9f9")
        self.title_label.configure(compound='left')
        self.title_label.configure(font="-family {Noto Sans} -size 24 -weight bold")
        self.title_label.configure(text='''DL Reasoner ALC''')

        self.concept_input = tk.Text(self.top)
        self.concept_input.place(relx=0.049, rely=0.196, relheight=0.098
                                 , relwidth=0.773)
        self.concept_input.configure(background="white")
        self.concept_input.configure(font="-family {Noto Sans} -size 12")
        self.concept_input.configure(selectbackground="blue")
        self.concept_input.configure(selectforeground="white")
        self.concept_input.configure(wrap="word")
        self.concept_input.insert(END, ' insert concept in manchester syntax (ex.: hasChild some Person) ')

        self.run_button = tk.Button(self.top, command=self.submit)
        self.run_button.place(relx=0.863, rely=0.222, height=33, width=71)
        self.run_button.configure(activebackground="#f9f9f9")
        self.run_button.configure(borderwidth="2")
        self.run_button.configure(compound='left')
        self.run_button.configure(text='''submit''')

        self.ontology_canvas = tk.Text(self.top,font=("Helvetica", 14))
        self.ontology_canvas.place(relx=0.012, rely=0.379, relheight=0.483
                                   , relwidth=0.474)
        self.ontology_canvas.configure(borderwidth="2")
        self.ontology_canvas.configure(relief="ridge")
        self.ontology_canvas.configure(highlightbackground="#ffffff")
        self.ontology_canvas.insert(tk.END,'''Ontology GCIs''')

        self.yscrollbar = tk.Scrollbar(self.ontology_canvas,orient=VERTICAL)
        self.yscrollbar.pack(side=RIGHT, fill=Y)
        #self.ontology_canvas.configure(selectbackground="blue")
        #self.ontology_canvas.configure(selectforeground="white")

        self.model_canvas = tk.Canvas(self.top)
        self.model_canvas.place(relx=0.522, rely=0.379, relheight=0.483
                                , relwidth=0.462)
        self.model_canvas.configure(borderwidth="2")
        self.model_canvas.configure(relief="ridge")
        self.model_canvas.configure(selectbackground="blue")
        self.model_canvas.configure(selectforeground="white")

        self.rdf_button = tk.Button(self.top, command=self.gen_rdf)
        self.rdf_button.place(relx=0.17, rely=0.888, height=33, width=111)
        self.rdf_button.configure(activebackground="#f9f9f9")
        self.rdf_button.configure(borderwidth="2")
        self.rdf_button.configure(compound='left')
        self.rdf_button.configure(text='''export rdf''')

        self.graph_button = tk.Button(self.top, command=self.gen_graph)
        self.graph_button.place(relx=0.693, rely=0.888, height=33, width=91)
        self.graph_button.configure(activebackground="#f9f9f9")
        self.graph_button.configure(borderwidth="2")
        self.graph_button.configure(compound='left')
        self.graph_button.configure(text='''export graph''')

        self.filename_label = tk.Label(self.top)
        self.filename_label.place(relx=0.049, rely=0.117, height=20, width=634)
        self.filename_label.configure(activebackground="#ffffff")
        self.filename_label.configure(anchor='w')
        self.filename_label.configure(compound='left')
        self.filename_label.configure(disabledforeground="#ffffff")
        self.filename_label.configure(highlightbackground="#ffffff")
        self.filename_label.configure(state='active')
        self.filename_label.configure(text='''choose an owl file ontology''')

        self.load_button = tk.Button(self.top, command=self.load_ontology)
        self.load_button.place(relx=0.863, rely=0.117, height=23, width=71)
        self.load_button.configure(activebackground="#f9f9f9")
        self.load_button.configure(borderwidth="2")
        self.load_button.configure(compound='left')
        self.load_button.configure(text='''load OWL''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.024, rely=0.326, height=30, width=373)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(compound='left')
        self.Label2.configure(font="-family {Noto Sans} -size 13")
        self.Label2.configure(text='''Ontology:''')

        self.Label2_1 = tk.Label(self.top)
        self.Label2_1.place(relx=0.535, rely=0.326, height=30, width=373)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(font="-family {Noto Sans} -size 13")
        self.Label2_1.configure(text='''Model:''')

        self.result_label = tk.Label(self.top)
        self.result_label.place(relx=0.31, rely=0.888, height=33, width=300)
        self.result_label.configure(activebackground="#f9f9f9")
        self.result_label.configure(compound='left')
        self.result_label.configure(font="-family {Noto Sans} -size 14 -weight bold")
        self.result_label.configure(text='''result:''')

    def load_ontology(self):
        filename = filedialog.askopenfilename(initialdir=".",
                                              title="Select a File",
                                              filetypes=(("ontology file",
                                                          "*.owl"),
                                                         ("all files",
                                                          "*.")))

        self.onto.import_onto(f"file://{filename}")
        self.filename_label.configure(text=filename)
        self.ontology_canvas.delete('1.0', END)
        self.ontology_canvas.insert(END, self.onto.print_gci())

    def submit(self):

        self.engine = InferenceEngine(self.onto.tbox)
        C = self.input_mgr.parse_manchester(self.concept_input.get("1.0", "end-1c"))
        clock = time.time()
        self.result = self.engine.check_satisfy(C)
        clock = time.time() - clock
        if self.result is not None:
            self.result_label.configure(text=f"concept satisfied in {clock:.4f}s")
            graph = self.output_mgr.build_dot_graph(self.result, 'atomic')
            graph.render()

            img = Image.open('tableaux.gv.png')
            img = img.resize((self.model_canvas.winfo_width(), self.model_canvas.winfo_height()), Image.ANTIALIAS)
            img = ImageTk.PhotoImage(img)

            self.model_canvas.create_image(0, 0, anchor=NW, image=img)
            self.model_canvas.image = img
        else:
            self.result_label.configure(text=f"concept unsatisfable in {clock:.4f}s")

    def gen_rdf(self):
        if self.result is None:
            messagebox.showerror("Generation Error", "You should fist submit a task")
            return
        print('gen rdf')
        self.output_mgr.export_rdf(self.result)

    def gen_graph(self):
        if self.result is None:
            messagebox.showerror("Generation Error", "You should fist submit a task")
            return
        print('gen graph')
        graph = self.output_mgr.build_dot_graph(self.result, 'atomic')
        graph.render()


if __name__ == '__main__':
    '''Main entry point for the application.'''
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    app = Application(root)
    root.mainloop()
